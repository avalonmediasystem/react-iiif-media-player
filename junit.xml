<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="56" failures="0" time="8.076">
  <testsuite name="iiif-parser" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:31" time="1.693" tests="18">
    <testcase classname="iiif-parser canvasesInManifest() determines whether canvases exist in the manifest" name="iiif-parser canvasesInManifest() determines whether canvases exist in the manifest" time="0.003">
    </testcase>
    <testcase classname="iiif-parser should contain a structures[] array which represents structured metadata" name="iiif-parser should contain a structures[] array which represents structured metadata" time="0">
    </testcase>
    <testcase classname="iiif-parser getChildCanvases() should return an array of existing child &quot;Canvas&quot; items if they exist for a Range" name="iiif-parser getChildCanvases() should return an array of existing child &quot;Canvas&quot; items if they exist for a Range" time="0.001">
    </testcase>
    <testcase classname="iiif-parser filterVisibleRangeItem() return item when behavior is not equal to no-nav" name="iiif-parser filterVisibleRangeItem() return item when behavior is not equal to no-nav" time="0.001">
    </testcase>
    <testcase classname="iiif-parser filterVisibleRangeItem() return null when behavior is equal to no-nav" name="iiif-parser filterVisibleRangeItem() return null when behavior is equal to no-nav" time="0.001">
    </testcase>
    <testcase classname="iiif-parser getMediaFragment() returns a start/stop helper object from a uri" name="iiif-parser getMediaFragment() returns a start/stop helper object from a uri" time="0">
    </testcase>
    <testcase classname="iiif-parser getMediaFragment() returns undefined when invalid uri is given" name="iiif-parser getMediaFragment() returns undefined when invalid uri is given" time="0.001">
    </testcase>
    <testcase classname="iiif-parser getMediaInfo() should return sources, mediaType and parsing error (if any)" name="iiif-parser getMediaInfo() should return sources, mediaType and parsing error (if any)" time="0.001">
    </testcase>
    <testcase classname="iiif-parser getMediaInfo() should return error when invalid canvas index is given" name="iiif-parser getMediaInfo() should return error when invalid canvas index is given" time="0.03">
    </testcase>
    <testcase classname="iiif-parser getTracks() returns captions related info" name="iiif-parser getTracks() returns captions related info" time="0.001">
    </testcase>
    <testcase classname="iiif-parser getLabelValue() returns label when en tag is available" name="iiif-parser getLabelValue() returns label when en tag is available" time="0">
    </testcase>
    <testcase classname="iiif-parser getLabelValue() returns label when none tag is available" name="iiif-parser getLabelValue() returns label when none tag is available" time="0.001">
    </testcase>
    <testcase classname="iiif-parser getLabelValue() returns lable when a string is given" name="iiif-parser getLabelValue() returns lable when a string is given" time="0">
    </testcase>
    <testcase classname="iiif-parser getLabelValue() returns label could not be parsed message when label is not present" name="iiif-parser getLabelValue() returns label could not be parsed message when label is not present" time="0">
    </testcase>
    <testcase classname="iiif-parser getCanvasId() returns canvas uri" name="iiif-parser getCanvasId() returns canvas uri" time="0">
    </testcase>
    <testcase classname="iiif-parser hasNextSection() returns whether a next section exists" name="iiif-parser hasNextSection() returns whether a next section exists" time="0.002">
    </testcase>
    <testcase classname="iiif-parser isAtTop() returns true when an item is at the top of the structure" name="iiif-parser isAtTop() returns true when an item is at the top of the structure" time="0">
    </testcase>
    <testcase classname="iiif-parser isAtTop() returns false when an item is not at the top of the structure" name="iiif-parser isAtTop() returns false when an item is not at the top of the structure" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ListItem component" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:33" time="0.771" tests="3">
    <testcase classname="ListItem component renders successfully" name="ListItem component renders successfully" time="0.026">
    </testcase>
    <testcase classname="ListItem component creates an anchor element and title for an item" name="ListItem component creates an anchor element and title for an item" time="0.007">
    </testcase>
    <testcase classname="ListItem component renders a child list if there are child ranges in manifest" name="ListItem component renders a child list if there are child ranges in manifest" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="MediaElement component" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:34" time="0.78" tests="9">
    <testcase classname="MediaElement component renders a video player successfully" name="MediaElement component renders a video player successfully" time="0.124">
    </testcase>
    <testcase classname="MediaElement component renders an audio player successfully" name="MediaElement component renders an audio player successfully" time="0.038">
    </testcase>
    <testcase classname="MediaElement component passes through the correct props" name="MediaElement component passes through the correct props" time="0.057">
    </testcase>
    <testcase classname="MediaElement component renders the correct media source elements" name="MediaElement component renders the correct media source elements" time="0.057">
    </testcase>
    <testcase classname="MediaElement component renders auto quality by default" name="MediaElement component renders auto quality by default" time="0.027">
    </testcase>
    <testcase classname="MediaElement component renders source for the selected quality" name="MediaElement component renders source for the selected quality" time="0.043">
    </testcase>
    <testcase classname="MediaElement component do not render captions for audio player" name="MediaElement component do not render captions for audio player" time="0.025">
    </testcase>
    <testcase classname="MediaElement component renders captions by default for video player" name="MediaElement component renders captions by default for video player" time="0.054">
    </testcase>
    <testcase classname="MediaElement component turns on/off captions" name="MediaElement component turns on/off captions" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="Integration test" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:35" time="0.57" tests="2">
    <testcase classname="Integration test both components renders successfully" name="Integration test both components renders successfully" time="0.094">
    </testcase>
    <testcase classname="Integration test renders section when clicked on structure item" name="Integration test renders section when clicked on structure item" time="0.104">
    </testcase>
  </testsuite>
  <testsuite name="ListItem component" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:36" time="0.34" tests="3">
    <testcase classname="ListItem component renders successfully" name="ListItem component renders successfully" time="0.036">
    </testcase>
    <testcase classname="ListItem component displays the correct ListItems" name="ListItem component displays the correct ListItems" time="0.009">
    </testcase>
    <testcase classname="ListItem component displays collapsible structure" name="ListItem component displays collapsible structure" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="MediaElementContainer component" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:36" time="0.362" tests="2">
    <testcase classname="MediaElementContainer component reads media type as audio from manifest" name="MediaElementContainer component reads media type as audio from manifest" time="0.032">
    </testcase>
    <testcase classname="MediaElementContainer component reads media type as video from manifest" name="MediaElementContainer component reads media type as video from manifest" time="0.046">
    </testcase>
  </testsuite>
  <testsuite name="StructuredNav component" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:37" time="0.332" tests="3">
    <testcase classname="StructuredNav component renders successfully" name="StructuredNav component renders successfully" time="0.038">
    </testcase>
    <testcase classname="StructuredNav component returns a List of items when structures are present in the manifest" name="StructuredNav component returns a List of items when structures are present in the manifest" time="0.05">
    </testcase>
    <testcase classname="StructuredNav component returns message when structures are not present in manifest" name="StructuredNav component returns message when structures are not present in manifest" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Redux actions" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:37" time="0.293" tests="7">
    <testcase classname="Redux actions should create an action for clicking on a navigation item" name="Redux actions should create an action for clicking on a navigation item" time="0">
    </testcase>
    <testcase classname="Redux actions should create an action for passed in external component configuration" name="Redux actions should create an action for passed in external component configuration" time="0.001">
    </testcase>
    <testcase classname="Redux actions should create an action for Mediaelement player initiliization" name="Redux actions should create an action for Mediaelement player initiliization" time="0">
    </testcase>
    <testcase classname="Redux actions should create an action for Mediaelement player captions button click" name="Redux actions should create an action for Mediaelement player captions button click" time="0">
    </testcase>
    <testcase classname="Redux actions should create an action for Mediaelement player play/pause status" name="Redux actions should create an action for Mediaelement player play/pause status" time="0.001">
    </testcase>
    <testcase classname="Redux actions should create an action for setting the playhead start time" name="Redux actions should create an action for setting the playhead start time" time="0">
    </testcase>
    <testcase classname="Redux actions should create an action for setting clicked flag to false" name="Redux actions should create an action for setting clicked flag to false" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Redux player reducer" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:37" time="0.175" tests="4">
    <testcase classname="Redux player reducer should return the initial state" name="Redux player reducer should return the initial state" time="0.001">
    </testcase>
    <testcase classname="Redux player reducer should handle MEJS_PLAYER_INITIALIZED" name="Redux player reducer should handle MEJS_PLAYER_INITIALIZED" time="0">
    </testcase>
    <testcase classname="Redux player reducer should handle MEJS_CAPTIONS" name="Redux player reducer should handle MEJS_CAPTIONS" time="0.001">
    </testcase>
    <testcase classname="Redux player reducer should handle MEJS_PLAYING" name="Redux player reducer should handle MEJS_PLAYING" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Redux index reducer" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:37" time="0.183" tests="1">
    <testcase classname="Redux index reducer should return the initial state" name="Redux index reducer should return the initial state" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Redux nav reducer" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:38" time="0.173" tests="2">
    <testcase classname="Redux nav reducer should return the initial state" name="Redux nav reducer should return the initial state" time="0">
    </testcase>
    <testcase classname="Redux nav reducer should handle NAV_ITEM_CLICK" name="Redux nav reducer should handle NAV_ITEM_CLICK" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Redux external-config reducer" errors="0" failures="0" skipped="0" timestamp="2020-10-09T18:35:38" time="0.158" tests="2">
    <testcase classname="Redux external-config reducer should return the initial state" name="Redux external-config reducer should return the initial state" time="0.001">
    </testcase>
    <testcase classname="Redux external-config reducer should handle UPDATE_EXTERNAL_CONFIG" name="Redux external-config reducer should handle UPDATE_EXTERNAL_CONFIG" time="0">
    </testcase>
  </testsuite>
</testsuites>